#
# qmake configuration for building with arm-none-linux-gnueabi-g++
#
include(../common/unix.conf)
include(../common/gcc-base-unix.conf)
include(../common/g++-unix.conf)
include(../common/qws.conf)

contains(QMAKE_HOST.os,"Windows"){
	MECT_PREFIX        = C:/Qt487
	MAKEFILE_GENERATOR = MINGW
	CROSS_COMPILE       = arm-none-linux-gnueabi-
}
contains(QMAKE_HOST.os,"Linux"){
	MECT_PREFIX        = /opt/Qt4.8.7
	MAKEFILE_GENERATOR = UNIX
	CROSS_COMPILE       = /opt/CodeSourcery/bin/arm-none-linux-gnueabi-
}
CODESOURCERY_ARM_CFLAGS = -O2 -msoft-float -fsigned-char

QT_ROOTFS = $${MECT_PREFIX}/imx28/rootfs

QT_ROOTFS_QT_LIB     = $${QT_ROOTFS}/usr/lib
QT_ROOTFS_INC        = $${QT_ROOTFS}/usr/include
QT_ROOTFS_KERNEL_INC = $${QT_ROOTFS}/usr/src/linux/include

QT_LRELEASE_PATH = $${MECT_PREFIX}/desktop/bin
QT_LUPDATE_PATH = $${MECT_PREFIX}/desktop/bin

ATCM_TEMPLATE_BASE_DIR = $${MECT_PREFIX}/desktop/QtCreator/share/qtcreator/templates/wizards

CONFIG                 += no_import_libs no_generated_target_info

# modifications to g++.conf
QMAKE_CC                = $${CROSS_COMPILE}gcc
QMAKE_CXX               = $${CROSS_COMPILE}g++
QMAKE_LINK              = $${CROSS_COMPILE}g++
QMAKE_LINK_SHLIB        = $${CROSS_COMPILE}g++
QMAKE_LIB               = $${CROSS_COMPILE}ar
QMAKE_AR                = $${CROSS_COMPILE}ar cqs
QMAKE_OBJCOPY           = $${CROSS_COMPILE}objcopy
QMAKE_STRIP             = $${CROSS_COMPILE}strip

# run cc ?
QMAKE_RUN_CC            = $(CC) -c $(CFLAGS) $(INCPATH) -o $obj $src
QMAKE_RUN_CC_IMP        = $(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<
QMAKE_RUN_CXX           = $(CXX) -c $(CXXFLAGS) $(INCPATH) -o $obj $src
QMAKE_RUN_CXX_IMP       = $(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

# include
QMAKE_INCDIR            =
QMAKE_INCDIR_QT         = $${QT_ROOTFS_INC} $${QT_ROOTFS_KERNEL_INC} $$[QT_INSTALL_HEADERS]

# libraries
QMAKE_LIBDIR_QT         = $${QT_ROOTFS_QT_LIB}

QMAKE_MOC               = $$[QT_INSTALL_BINS]\\moc.exe
QMAKE_UIC               = $$[QT_INSTALL_BINS]\\uic.exe
QMAKE_IDC               = $$[QT_INSTALL_BINS]\\idc.exe

QMAKE_COPY              = copy /y
QMAKE_COPY_FILE         = $(COPY)
QMAKE_COPY_DIR          = xcopy /s /q /y /i
QMAKE_MOVE              = move
QMAKE_DEL_FILE          = del
QMAKE_MKDIR             = mkdir
QMAKE_DEL_DIR           = rmdir
QMAKE_CHK_DIR_EXISTS    = if not exist
QMAKE_IDL               = midl
QMAKE_ZIP               = zip -r -9

TARGET_SYSROOT          = 
TARGET_QTDIR            = 

#modifications to gcc-base.conf

# C compiler
QMAKE_CFLAGS           += $$CODESOURCERY_ARM_CFLAGS -D_REENTRANT

# C++ compiler
QMAKE_CXXFLAGS         += $$CODESOURCERY_ARM_CFLAGS -D_REENTRANT
QMAKE_CXXFLAGS_RELEASE -= -O2
QMAKE_CXXFLAGS_RELEASE += -O3
QMAKE_CXXFLAGS_RELEASE += -Wno-psabi
QMAKE_CXXFLAGS_DEBUG   += -Wno-psabi

# linker command

# linker libraries
QMAKE_LIBS             += -lrt -lpthread -ldl

# linker flags
QMAKE_LFLAGS           += $${QMAKE_LFLAGS_RPATH}$${QT_ROOTFS_QT_LIB}

!isEmpty(TARGET_QTDIR) {
    QMAKE_LFLAGS       += $${QMAKE_LFLAGS_RPATH}$${TARGET_QTDIR}/lib
}
!isEmpty(TARGET_SYSROOT) {
    QMAKE_LFLAGS       += $${QMAKE_LFLAGS_RPATH}$${TARGET_SYSROOT}/lib:$${TARGET_SYSROOT}/usr/lib
    QMAKE_LFLAGS       += -Wl,--dynamic-linker=$${TARGET_SYSROOT}/lib/ld-linux.so.3
}
load(qt_config)
