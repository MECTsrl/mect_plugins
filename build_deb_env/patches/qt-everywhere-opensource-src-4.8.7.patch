--- A/configure	2015-05-07 16:14:56.000000000 +0200
+++ B/configure	2024-02-06 16:12:37.657742307 +0100
@@ -64,6 +64,7 @@
 OPT_CMDLINE=`echo $@ | sed "s,-v ,,g; s,-v$,,g"`
 
 # initialize global variables
+CONFIG_SEPARATORS=`printf ' \t'`
 QMAKE_SWITCHES=
 QMAKE_VARS=
 QMAKE_CONFIG=
@@ -201,6 +202,21 @@
     getQMakeConf3 "$1" "$xspecvals"
 }
 
+testXConfig()
+{
+    # Put a space on each end of the CONFIG value so that searching for the
+    # target with whitespace on either side will work even when it's the
+    # first/last/only item in the CONFIG value.
+    case \ `getXQMakeConf CONFIG`\  in
+    *[${CONFIG_SEPARATORS}]$1[${CONFIG_SEPARATORS}]*)
+        return 0
+        ;;
+    *)
+        return 1
+        ;;
+    esac
+}
+
 compilerSupportsFlag()
 {
     cat >conftest.cpp <<EOF
@@ -5357,7 +5373,7 @@
 fi
 
 # check IPC support
-if [ "$XPLATFORM_SYMBIAN_SBSV2" = "no" ]; then
+if [ "$XPLATFORM_SYMBIAN_SBSV2" = "no" -a "$XPLATFORM_MINGW" = "no" ]; then
     # Raptor does not support configure tests.
     if ! compileTest unix/ipc_sysv "ipc_sysv" ; then
         # SYSV IPC is not supported - check POSIX IPC
@@ -5815,7 +5831,7 @@
 
 # auto-detect iconv(3) support
 if [ "$CFG_ICONV" != "no" ]; then
-    if [ "$PLATFORM_QWS" = "yes" ] || [ "$PLATFORM_QPA" = "yes" -a "$CFG_ICONV" = "auto" ]; then
+    if [ "$PLATFORM_QWS" = "yes" -o "$XPLATFORM_MINGW" = "yes" ] || [ "$PLATFORM_QPA" = "yes" -a "$CFG_ICONV" = "auto" ]; then
         CFG_ICONV=no
     elif compileTest "unix/iconv" "POSIX iconv"; then
         CFG_ICONV=yes
@@ -7407,7 +7423,11 @@
 [ "$CFG_REDUCE_EXPORTS" = "yes" ] && QT_CONFIG="$QT_CONFIG reduce_exports"
 [ "$CFG_STACK_PROTECTOR_STRONG" = "yes" ] && QT_CONFIG="$QT_CONFIG stack-protector-strong"
 [ "$CFG_REDUCE_RELOCATIONS" = "yes" ] && QT_CONFIG="$QT_CONFIG reduce_relocations"
-[ "$CFG_PRECOMPILE" = "yes" ] && QMAKE_CONFIG="$QMAKE_CONFIG precompile_header"
+if testXConfig precompile_header; then
+    [ "$CFG_PRECOMPILE" = "no" ] && QMakeVar del CONFIG precompile_header
+else
+    [ "$CFG_PRECOMPILE" = "yes" ] && QMAKE_CONFIG="$QMAKE_CONFIG precompile_header"
+fi
 if [ "$CFG_SEPARATE_DEBUG_INFO" = "yes" ]; then
     QMakeVar add QMAKE_CFLAGS -g
     QMakeVar add QMAKE_CXXFLAGS -g
@@ -7734,7 +7754,7 @@
     *-g++*)
 	# Check gcc's version
 	case "$(${QMAKE_CONF_COMPILER} -dumpversion)" in
-	    5*|4*|3.4*)
+	    12*|11*|10*|9*|8*|7*|6*|5*|4*|3.4*)
 		;;
             3.3*)
                 canBuildWebKit="no"
@@ -7820,12 +7840,12 @@
     canBuildWebKit="no"
 fi
 
-if [ "$CFG_SHARED" = "no" ]; then
-    echo
-    echo "WARNING: Using static linking will disable the WebKit module."
-    echo
-    canBuildWebKit="no"
-fi
+#if [ "$CFG_SHARED" = "no" ]; then
+   # echo
+   # echo "WARNING: Using static linking will disable the WebKit module."
+   # echo
+   # canBuildWebKit="no"
+#fi
 
 CFG_CONCURRENT="yes"
 if [ "$canBuildQtConcurrent" = "no" ]; then
@@ -8050,7 +8070,7 @@
     3.*)
         COMPILER_VERSION="3.*"
         ;;
-    5*|4.*)
+    12*|11*|10*|9*|8*|7*|6*|5*|4.*)
         COMPILER_VERSION="4"
         ;;
     *)
--- A/mkspecs/linux-g++/qmake.conf	2024-02-06 15:17:03.234031810 +0000
+++ B/mkspecs/linux-g++/qmake.conf	2024-02-07 10:52:14.186480669 +0000
@@ -12,4 +12,7 @@
 include(../common/linux.conf)
 include(../common/gcc-base-unix.conf)
 include(../common/g++-unix.conf)
+
+QMAKE_CXXFLAGS = $$QMAKE_CFLAGS -std=gnu++98 -Wno-error=class-memaccess
+
 load(qt_config)
--- A/src/corelib/global/qglobal.h	2015-05-07 16:14:48.000000000 +0200
+++ B/src/corelib/global/qglobal.h	2024-02-06 20:36:59.099713801 +0100
@@ -2487,17 +2487,28 @@
 template <typename T>
 class QForeachContainer {
 public:
-    inline QForeachContainer(const T& t) : c(t), brk(0), i(c.begin()), e(c.end()) { }
+    // patch from https://github.com/wkhtmltopdf/qt.git -b wk_4.8.7_0.12.6
+    // see also https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90617
+    inline QForeachContainer(const T& t) : c(t), i(c.begin()), e(c.end()), control(1) { }
     const T c;
     int brk;
     typename T::const_iterator i, e;
+    int control;
 };
-
+// Explanation of the control word:
+//  - it's initialized to 1
+//  - that means both the inner and outer loops start
+//  - if there were no breaks, at the end of the inner loop, it's set to 0, which
+//    causes it to exit (the inner loop is run exactly once)
+//  - at the end of the outer loop, it's inverted, so it becomes 1 again, allowing
+//    the outer loop to continue executing
+//  - if there was a break inside the inner loop, it will exit with control still
+//    set to 1; in that case, the outer loop will invert it to 0 and will exit too
 #define Q_FOREACH(variable, container)                                \
 for (QForeachContainer<__typeof__(container)> _container_(container); \
-     !_container_.brk && _container_.i != _container_.e;              \
-     __extension__  ({ ++_container_.brk; ++_container_.i; }))                       \
-    for (variable = *_container_.i;; __extension__ ({--_container_.brk; break;}))
+     _container_.control && _container_.i != _container_.e;         \
+     ++_container_.i, _container_.control ^= 1)                     \
+    for (variable = *_container_.i; _container_.control; _container_.control = 0)
 
 #else
 
--- A/tools/linguist/linguist/messagemodel.cpp	2015-05-07 14:14:39.000000000 +0000
+++ B/tools/linguist/linguist/messagemodel.cpp	2024-02-07 10:34:02.191186585 +0000
@@ -183,7 +183,7 @@
         if (ContextItem *c = one->findContext(oc->context())) {
             for (int j = 0; j < oc->messageCount(); ++j) {
                 MessageItem *m = oc->messageItem(j);
-                if (c->findMessage(m->text(), m->comment()) >= 0)
+                if (c->findMessage(m->text(), m->comment()) != 0)
                     ++inBoth;
             }
         }
--- A/tools/tools.pro	2015-05-07 14:14:40.000000000 +0000
+++ B/tools/tools.pro	2024-02-07 16:42:12.923786265 +0000
@@ -35,7 +35,7 @@
     SUBDIRS += macdeployqt
 }
 
-embedded:SUBDIRS += kmap2qmap
+## embedded:SUBDIRS += kmap2qmap
 
 contains(QT_CONFIG, dbus):SUBDIRS += qdbus
 # We don't need these command line utilities on embedded platforms.
