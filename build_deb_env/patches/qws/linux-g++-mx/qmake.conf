#
# qmake configuration for building with arm-none-linux-gnueabi-g++
#
include(../../common/gcc-base-unix.conf)
include(../../common/g++-unix.conf)
include(../../common/linux.conf)
include(../../common/qws.conf)

CROSSCOMPILE = xxxxxxxx
contains(QMAKE_HOST.os,"Windows"){
	MECT_PREFIX        = C:/Qt487
	MAKEFILE_GENERATOR = MINGW
	CROSSCOMPILE       = arm-none-linux-gnueabi-
}
contains(QMAKE_HOST.os,"Linux"){
	MECT_PREFIX        = /opt/Qt4.8.7
	MAKEFILE_GENERATOR = UNIX
	CROSSCOMPILE       = /opt/CodeSourcery/bin/arm-none-linux-gnueabi-
}

QT_ROOTFS = $${MECT_PREFIX}/imx28/rootfs

QT_ROOTFS_QT_LIB     = $${QT_ROOTFS}/usr/lib
QT_ROOTFS_INC        = $${QT_ROOTFS}/include $${QT_ROOTFS}/usr/include
QT_ROOTFS_KERNEL_INC = $${QT_ROOTFS}/usr/src/linux/include

QT_LRELEASE_PATH = $${MECT_PREFIX}/desktop/bin
QT_LUPDATE_PATH = $${MECT_PREFIX}/desktop/bin

ATCM_TEMPLATE_BASE_DIR = $${MECT_PREFIX}/desktop/QtCreator/share/qtcreator/templates/wizards

# modifications to g++.conf
QMAKE_CC                = $${CROSSCOMPILE}gcc
QMAKE_CXX               = $${CROSSCOMPILE}g++
QMAKE_LINK              = $${CROSSCOMPILE}g++
QMAKE_LINK_SHLIB        = $${CROSSCOMPILE}g++

QMAKE_AR                = $${CROSSCOMPILE}ar cqs
QMAKE_OBJCOPY           = $${CROSSCOMPILE}objcopy
QMAKE_STRIP             = $${CROSSCOMPILE}strip
QMAKE_RANLIB            = $${CROSSCOMPILE}ranlib

# run cc ?

# include
QMAKE_INCDIR            = $${QT_ROOTFS_INC} # per configure openssl
QMAKE_INCDIR_QT         = $${QMAKE_INCDIR} $${MECT_PREFIX}/include ## $$[QT_INSTALL_HEADERS]
QMAKE_INCDIR_X11        =

QMAKE_PCH_OUTPUT_EXT    = .gch

# libraries
QMAKE_LIBDIR            = $${QT_ROOTFS_QT_LIB} # per configure openssl
QMAKE_LIBDIR_QT         = $${QMAKE_LIBDIR} $${MECT_PREFIX}/lib
QMAKE_LIBDIR_X11        =

QMAKE_MOC               = $$[QT_INSTALL_BINS]/moc
QMAKE_UIC               = $$[QT_INSTALL_BINS]/uic


QMAKE_COPY              = cp -f
QMAKE_COPY_FILE         = $(COPY)
QMAKE_COPY_DIR          = $(COPY) -r
QMAKE_MOVE              = mv -f
QMAKE_DEL_FILE          = rm -f
QMAKE_MKDIR             = mkdir -p
QMAKE_DEL_DIR           = rmdir
QMAKE_CHK_DIR_EXISTS    = test -d

QMAKE_TAR               = tar -cf
QMAKE_GZIP              = gzip -9f

QMAKE_INSTALL_FILE      = install -m 644 -p
QMAKE_INSTALL_PROGRAM   = install -m 755 -p

TEMPLATE                       = app
CONFIG                        += qt warn_on release incremental link_prl
QT                            += core gui
QMAKE_INCREMENTAL_STYLE        = sublib

#modifications to gcc-base.conf

# C compiler
QMAKE_CFLAGS            += -pipe -DTARGET_ARM
QMAKE_CFLAGS_RELEASE          += -O2
QMAKE_CFLAGS_DEPS             += -M
QMAKE_CFLAGS_WARN_ON          += -Wall -W
QMAKE_CFLAGS_WARN_OFF         += -w
QMAKE_CFLAGS_DEBUG            += -g
QMAKE_CFLAGS_SHLIB            += -fPIC
QMAKE_CFLAGS_STATIC_LIB       += -fPIC
QMAKE_CFLAGS_YACC             += -Wno-unused -Wno-parentheses
QMAKE_CFLAGS_HIDESYMS         += -fvisibility=hidden
#QMAKE_CFLAGS_PRECOMPILE       += -x c-header -c ${QMAKE_PCH_INPUT} -o ${QMAKE_PCH_OUTPUT}
#QMAKE_CFLAGS_USE_PRECOMPILE   += -include ${QMAKE_PCH_OUTPUT_BASE}
QMAKE_CFLAGS_THREAD           += -D_REENTRANT

# C++ compiler
QMAKE_CXXFLAGS                += $$QMAKE_CFLAGS
QMAKE_CXXFLAGS_THREAD         += $$QMAKE_CFLAGS_THREAD
QMAKE_CXXFLAGS_DEPS           += $$QMAKE_CFLAGS_DEPS
QMAKE_CXXFLAGS_WARN_ON        += $$QMAKE_CFLAGS_WARN_ON
QMAKE_CXXFLAGS_WARN_OFF       += $$QMAKE_CFLAGS_WARN_OFF
QMAKE_CXXFLAGS_RELEASE        += $$QMAKE_CFLAGS_RELEASE
QMAKE_CXXFLAGS_DEBUG          += $$QMAKE_CFLAGS_DEBUG
QMAKE_CXXFLAGS_SHLIB          += $$QMAKE_CFLAGS_SHLIB
QMAKE_CXXFLAGS_STATIC_LIB     += $$QMAKE_CFLAGS_STATIC_LIB
QMAKE_CXXFLAGS_YACC           += $$QMAKE_CFLAGS_YACC
QMAKE_CXXFLAGS_HIDESYMS       += $$QMAKE_CFLAGS_HIDESYMS -fvisibility-inlines-hidden
#QMAKE_CXXFLAGS_PRECOMPILE     += -x c++-header -c ${QMAKE_PCH_INPUT} -o ${QMAKE_PCH_OUTPUT}
#QMAKE_CXXFLAGS_USE_PRECOMPILE  = $$QMAKE_CFLAGS_USE_PRECOMPILE

# linker command
QMAKE_LINK_C                   = $${CROSSCOMPILE}gcc
QMAKE_LINK_C_SHLIB             = $${CROSSCOMPILE}gcc

# linker libraries
QMAKE_LIBS                     =
QMAKE_LIBS_DYNLOAD             = -ldl
QMAKE_LIBS_X11                 =
QMAKE_LIBS_X11SM               =
QMAKE_LIBS_NIS                 = -lnsl
QMAKE_LIBS_THREAD              = -lpthread

# linker flags
QMAKE_LFLAGS                  +=
QMAKE_LFLAGS_RELEASE          += -Wl,-O1
QMAKE_LFLAGS_DEBUG            +=
QMAKE_LFLAGS_APP              +=
QMAKE_LFLAGS_SHLIB            += -shared
QMAKE_LFLAGS_PLUGIN           += $$QMAKE_LFLAGS_SHLIB
QMAKE_LFLAGS_SONAME           += -Wl,-soname,
QMAKE_LFLAGS_THREAD           +=
QMAKE_LFLAGS_NOUNDEF          += -Wl,--no-undefined
QMAKE_LFLAGS_RPATH             = -Wl,-rpath,
# -Bsymbolic-functions (ld) support
QMAKE_LFLAGS_BSYMBOLIC_FUNC    = -Wl,-Bsymbolic-functions
QMAKE_LFLAGS_DYNAMIC_LIST      = -Wl,--dynamic-list,

!isEmpty(TARGET_QTDIR) {
    QMAKE_LFLAGS       += $${QMAKE_LFLAGS_RPATH}$${TARGET_QTDIR}/lib
}
!isEmpty(TARGET_SYSROOT) {
    QMAKE_LFLAGS       += $${QMAKE_LFLAGS_RPATH}$${TARGET_SYSROOT}/lib:$${TARGET_SYSROOT}/usr/lib
    QMAKE_LFLAGS       += -Wl,--dynamic-linker=$${TARGET_SYSROOT}/lib/ld-linux.so.3
}
load(qt_config)
