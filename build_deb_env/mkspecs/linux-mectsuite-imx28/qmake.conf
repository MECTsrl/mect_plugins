#
# qmake configuration for MectSuite i.MX28 Apps (target = Mect imx28 TP/TPAC)
#

# NB: from configure: $$[QT_INSTALL_PREFIX] == $${MECT_PREFIX}/imx28
contains(QMAKE_HOST.os,"Windows"){
	MECT_PREFIX        = C:/Qt487
	CROSS_COMPILE      = arm-none-linux-gnueabi-
	MAKEFILE_GENERATOR = UNIX
	TARGET_PLATFORM	   = unix
} else : contains(QMAKE_HOST.os,"Linux"){
	MECT_PREFIX        = /opt/Qt4.8.7
	CROSS_COMPILE      = /opt/CodeSourcery/bin/arm-none-linux-gnueabi-
	MAKEFILE_GENERATOR = UNIX
	TARGET_PLATFORM	   = unix
} else {
	error(unknown host operating system $${QMAKE_HOST.os});
}
TEMPLATE		= app
CONFIG			+= qt warn_on release incremental link_prl gdb_dwarf_index
QT			+= core gui network
QMAKE_INCREMENTAL_STYLE = sublib

include(../common/linux.conf)
include(../common/gcc-base-unix.conf)
include(../common/g++-unix.conf)
include(../common/qws.conf)

QMAKE_CC                = $${CROSS_COMPILE}gcc
QMAKE_CXX               = $${CROSS_COMPILE}g++
QMAKE_LINK              = $${CROSS_COMPILE}g++
QMAKE_LINK_SHLIB        = $${CROSS_COMPILE}g++

QMAKE_AR                = $${CROSS_COMPILE}ar cqs
QMAKE_OBJCOPY           = $${CROSS_COMPILE}objcopy
QMAKE_STRIP             = $${CROSS_COMPILE}strip
QMAKE_RANLIB            = $${CROSS_COMPILE}ranlib

QMAKE_LINK_C            = $${CROSS_COMPILE}gcc
QMAKE_LINK_C_SHLIB      = $${CROSS_COMPILE}gcc

# NB: -Wno-psabi avoids qstring.h warning "note: the mangling of 'va_list' has changed in GCC 4.4"
QMAKE_CFLAGS   += -msoft-float -fsigned-char
QMAKE_CXXFLAGS += -msoft-float -fsigned-char -Wno-psabi \
	-DTARGET_ARM

load(qt_config)

QT_ROOTFS            = $${MECT_PREFIX}/imx28/rootfs # rootfs as produced by LTIB

exists( $${QT_ROOTFS}/include ) : exists( $${QT_ROOTFS}/lib ) {
	QMAKE_INCDIR += $${QT_ROOTFS}/include
	QMAKE_LIBDIR += $${QT_ROOTFS}/lib
}
QMAKE_LFLAGS += $${QMAKE_LFLAGS_RPATH}$${QT_ROOTFS}/lib

exists( $${QT_ROOTFS}/usr/include ) : exists( $${QT_ROOTFS}/usr/lib ) {
	QMAKE_INCDIR += $${QT_ROOTFS}/usr/include
	QMAKE_LIBDIR += $${QT_ROOTFS}/usr/lib
}
QMAKE_LFLAGS += $${QMAKE_LFLAGS_RPATH}$${QT_ROOTFS}/usr/lib

exists( $${QT_ROOTFS}/usr/include/glib-2.0 ) : exists( $${QT_ROOTFS}/usr/include/glib-2.0/glib ) : exists($${QT_ROOTFS}/usr/lib/glib-2.0/include) {
	QMAKE_INCDIR += $${QT_ROOTFS}/usr/include/glib-2.0 $${QT_ROOTFS}/usr/include/glib-2.0/glib $${QT_ROOTFS}/usr/lib/glib-2.0/include
	## QMAKE_LIBDIR += $${QT_ROOTFS}/usr/lib
	QMAKE_LIBS   += -lglib-2.0 -lgthread-2.0
}

exists( $${QT_ROOTFS}/usr/include/openssl/opensslv.h ) : exists( $${QT_ROOTFS}/usr/lib/libssl.so ) {
	## QMAKE_INCDIR += $${QT_ROOTFS}/usr/include
	## QMAKE_LIBDIR += $${QT_ROOTFS}/usr/lib
	## QMAKE_LIBS += -lssl -lcrypto 
}

exists( $${QT_ROOTFS}/usr/include/qwt.h ) : exists( $${QT_ROOTFS}/usr/lib/libqwt.so ) {
	## QMAKE_INCDIR_QT = $${QT_ROOTFS}/usr/include $${QMAKE_INCDIR_QT}
	## QMAKE_LIBDIR   += $${QT_ROOTFS}/usr/lib
	QMAKE_LIBS     += -lqwt 
}

exists( $${QT_ROOTFS}/usr/src/linux/include ) {
	QMAKE_INCDIR_QT = $${QT_ROOTFS}/usr/src/linux/include $${QMAKE_INCDIR_QT}
}

QT_LRELEASE_PATH = $${MECT_PREFIX}/desktop/bin
QT_LUPDATE_PATH = $${MECT_PREFIX}/desktop/bin

ATCM_TEMPLATE_BASE_DIR = $${MECT_PREFIX}/desktop/QtCreator/share/qtcreator/templates/wizards

# C compiler
QMAKE_CFLAGS           += -D_REENTRANT
QMAKE_CFLAGS_RELEASE   += -O3
QMAKE_CFLAGS_DEBUG     += -O2 -g # NB: -O2 mandatory

# C++ compiler
QMAKE_CXXFLAGS         += -D_REENTRANT
QMAKE_CXXFLAGS_RELEASE += -O3
QMAKE_CXXFLAGS_DEBUG   += -O2 -g # NB: -O2 mandatory

# linker libraries
QMAKE_LIBS             += -lrt -lpthread -ldl
QMAKE_LIBS             += -lpng -lz

# linker flags
QMAKE_LFLAGS_RELEASE   += -Wl,-O1
QMAKE_LFLAGS_DEBUG     += -Wl,-O1 -g

