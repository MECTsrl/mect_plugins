#
# qmake configuration for building with arm-none-linux-gnueabi-g++
#
include(../common/gcc-base-unix.conf)
include(../common/g++-unix.conf)
include(../common/linux.conf)
include(../common/qws.conf)

# host operating system
CROSS_COMPILE = cross_compile_is_not_defined_yet
contains(QMAKE_HOST.os,"Windows"){
	MECT_PREFIX        = C:/Qt487
	CROSS_COMPILE      = arm-none-linux-gnueabi-
}
contains(QMAKE_HOST.os,"Linux"){
	MECT_PREFIX        = /opt/Qt4.8.7
	CROSS_COMPILE      = /opt/CodeSourcery/bin/arm-none-linux-gnueabi-
}

# device operating system
win32 {
	MAKEFILE_GENERATOR = MINGW
}
unix {
	MAKEFILE_GENERATOR = UNIX
}

CODESOURCERY_ARM_CFLAGS = -O2 -msoft-float -fsigned-char -Wno-psabi -DTARGET_ARM

QT_ROOTFS = $${MECT_PREFIX}/imx28/rootfs

QT_ROOTFS_QT_LIB     = $${QT_ROOTFS}/usr/lib
QT_ROOTFS_INC        = $${QT_ROOTFS}/include $${QT_ROOTFS}/usr/include
QT_ROOTFS_KERNEL_INC = $${QT_ROOTFS}/usr/src/linux/include ## NB: delenda, search BUZZER

QT_LRELEASE_PATH = $${MECT_PREFIX}/desktop/bin
QT_LUPDATE_PATH = $${MECT_PREFIX}/desktop/bin

ATCM_TEMPLATE_BASE_DIR = $${MECT_PREFIX}/desktop/QtCreator/share/qtcreator/templates/wizards

CONFIG                 += qt warn_on release incremental link_prl

# modifications to g++.conf
QMAKE_CC                = $${CROSS_COMPILE}gcc
QMAKE_CXX               = $${CROSS_COMPILE}g++
QMAKE_LINK              = $${CROSS_COMPILE}g++
QMAKE_LINK_SHLIB        = $${CROSS_COMPILE}g++

QMAKE_AR                = $${CROSS_COMPILE}ar cqs
QMAKE_OBJCOPY           = $${CROSS_COMPILE}objcopy
QMAKE_STRIP             = $${CROSS_COMPILE}strip
QMAKE_RANLIB            = $${CROSS_COMPILE}ranlib

# run cc ?

# include
QMAKE_INCDIR            = $${QT_ROOTFS_INC} # per configure openssl e mysql
QMAKE_INCDIR_QT         = $${QMAKE_INCDIR} $${QT_ROOTFS_KERNEL_INC} $$[QT_INSTALL_HEADERS]

QMAKE_PCH_OUTPUT_EXT    = .gch

# libraries
QMAKE_LIBDIR            = $${QT_ROOTFS_QT_LIB} # per configure openssl e mysql
QMAKE_LIBDIR_QT         = $${QMAKE_LIBDIR} $${MECT_PREFIX}/imx28/lib

QMAKE_MOC               = $$[QT_INSTALL_BINS]/moc
QMAKE_UIC               = $$[QT_INSTALL_BINS]/uic

QMAKE_COPY              = cp -f
QMAKE_COPY_FILE         = $(COPY)
QMAKE_COPY_DIR          = $(COPY) -r
QMAKE_MOVE              = mv -f
QMAKE_DEL_FILE          = rm -f
QMAKE_MKDIR             = mkdir -p
QMAKE_DEL_DIR           = rmdir
QMAKE_CHK_DIR_EXISTS    = test -d

QMAKE_TAR               = tar -cf
QMAKE_GZIP              = gzip -9f

QMAKE_INSTALL_FILE      = install -m 644 -p
QMAKE_INSTALL_PROGRAM   = install -m 755 -p

TEMPLATE                = app
QT                     += core gui
QMAKE_INCREMENTAL_STYLE = sublib

#modifications to gcc-base.conf

# C compiler
QMAKE_CFLAGS           += $$CODESOURCERY_ARM_CFLAGS -D_REENTRANT
QMAKE_CFLAGS_RELEASE   += -O3

# C++ compiler
# NB: -Wno-psabi avoids qstring.h warning "note: the mangling of 'va_list' has changed in GCC 4.4"
QMAKE_CXXFLAGS         += $$QMAKE_CFLAGS
QMAKE_CXXFLAGS_RELEASE += $$QMAKE_CFLAGS_RELEASE

# linker command
QMAKE_LINK_C            = $${CROSSCOMPILE}gcc
QMAKE_LINK_C_SHLIB      = $${CROSSCOMPILE}gcc

# linker libraries
QMAKE_LIBS             += -lrt -lpthread -ldl
QMAKE_LIBS             += -lpng -lz

# linker flags
QMAKE_LFLAGS           += $${QMAKE_LFLAGS_RPATH}$${QT_ROOTFS_QT_LIB}
QMAKE_LFLAGS_RELEASE   += -Wl,-O1
QMAKE_LFLAGS_DEBUG     +=

!isEmpty(TARGET_QTDIR) {
    QMAKE_LFLAGS       += $${QMAKE_LFLAGS_RPATH}$${TARGET_QTDIR}/lib
}
!isEmpty(TARGET_SYSROOT) {
    QMAKE_LFLAGS       += $${QMAKE_LFLAGS_RPATH}$${TARGET_SYSROOT}/lib:$${TARGET_SYSROOT}/usr/lib
    QMAKE_LFLAGS       += -Wl,--dynamic-linker=$${TARGET_SYSROOT}/lib/ld-linux.so.3
}
load(qt_config)
